#!/usr/bin/env bash
# shellcheck disable=SC2002
# SC2002: Useless cat
set -euo pipefail

if [ -n "${XDG_CONFIG_HOME:-}" ]; then
  default_config_root=$XDG_CONFIG_HOME/pellets
else
  user="${SUDO_USER:-$USER}"
  user_home=$(eval "echo ~$user")
  default_config_root=$user_home/.config/pellets
fi

default_config_file=$default_config_root/packages
default_aur_install=$default_config_root/aur-install

function usage {
  echo "usage: $0 [<config>] [--aur-install <command>]"
}

function die {
  echo "$1" >&2
  usage >&2
  exit 1
}

config_file=

while [ $# -gt 0 ]; do
  case $1 in
    -h|--help)
      usage
      echo
      echo "<config> defaults to ~/.config/pellets/packages"
      echo "<command> must accept multiple packages as arguments"
      echo "    if --aur-install is not specified and ~/.config/pellets/aur-install exists"
      echo "    and is executable, that will be used instead"
      exit 0
      ;;

    --aur-install)
      if [ -z "${2:-}" ]; then
        die "Missing AUR install command"
      fi
      aur_install_command=${2?}
      shift 2
      ;;

    *)
      if [ -n "$config_file" ]; then
        die "Unexpected: $1"
      fi
      config_file=$1
      shift
      ;;
  esac
done

if [ -z "$config_file" ]; then
  config_file=$default_config_file
fi

if [ ! -r "$config_file" ]; then
  die "Cannot read config file: $config_file"
fi

config=$(cat "$config_file")

if [ -z "$config" ]; then
  die "Empty config file; aborting"
fi

if [ -z "${aur_install_command:-}" ] && [ -x "$default_aur_install" ]; then
  aur_install_command=$default_aur_install
fi

function strip-comments { sed 's/#.*$//'; }
function strip-whitespace { sed 's/ *//g; /./!d'; }

function assumed {
  echo '
    base
    linux
    linux-firmware
  '
}

# Parse config
packages=$({ echo "$config"; assumed; } | strip-comments | strip-whitespace)
function packages { echo "$packages"; }

# We sort here because we're stripping extra text off
function filter { grep "$@" || : no matches; }
function without-modifier { filter --invert-match '\[.*\]' | sort -u; }
function with-modifier {
  local pattern=" *\[$1\]$"
  filter --ignore-case "$pattern" | sed "s/$pattern//i" | sort -u
}

# Split config into three kinds
official=$(packages | without-modifier)
aur=$(packages | with-modifier 'aur')
groups=$(packages | with-modifier 'group')

# We sort here because pacman returns in sorted order that isn't necessarily
# aligned with our LC_COLLATE, causing `comm` to misbehave.
function query { pacman -Q --quiet "$@" | sort -u || : no results; }

# `unroll str cmd ...` runs `cmd ...` passing individual lines of string as
# separate quoted arguments.
function unroll {
  if [ -n "$1" ]; then
    readarray -t args <<< "$1"
    shift
    "$@" "${args[@]}"
  fi
}

# resolve-packages allows us to specify the provision in our config, e.g.,
# "python-neovim" which you can pass to pacman to install the package
# "python-pynvim". We resolve via -S (remotely) because if we have any new
# packages, we won't be able to find them with -Q.
function resolve-packages {
  # --nodeps twice will make sure we only print the single package
  if ! pacman -S --nodeps --nodeps --print-format "%n" "$@" | sort -u; then
    echo "There were some errors resolving packages -- did you forget to mark [group] or [aur]?" >&2
    return 1
  fi
}

# Resolve and combine config
ungrouped=$(unroll "$groups" query --groups)
resolved=$(unroll "$official" resolve-packages)
combined=$(sort -u --merge <(echo -n "$resolved") <(echo -n "$aur") <(echo -n "$ungrouped"))

# Query the current state of pacman's db
all=$(query)
explicit=$(query --explicit)
unrequired=$(query --explicit --unrequired --unrequired)
unused=$(query --deps --unrequired --unrequired)

# `set-diff str1 str2` returns lines in str1 that are not in str2. Both strings
# must be sorted.
function set-diff { comm -23 <(echo -n "$1") <(echo -n "$2"); }

# Use set differences
extra_explicit=$(set-diff "$explicit" "$combined")
need_asdeps=$(set-diff "$extra_explicit" "$unrequired")
need_remove=$(set-diff "$extra_explicit" "$need_asdeps")

missing_explicit=$(set-diff "$combined" "$explicit")
need_install=$(set-diff "$missing_explicit" "$all")
need_asexplicit=$(set-diff "$missing_explicit" "$need_install")
need_sync=$(set-diff "$need_install" "$aur")
need_aur=$(set-diff "$need_install" "$need_sync")

function can-aur-install { [ "${aur_install_command:-}" != "" ]; }

function color { printf "\e[1;%dm%s\e[0m" "$1" "$2"; }
function green { color 32 "$1"; }
function red { color 31 "$1"; }
function black { color 30 "$1"; }
function yellow { color 33 "$1"; }

function aur-color {
  if can-aur-install; then
    green "$@"
  else
    black "$@"
  fi
}

needs=""

function print-all {
  prefix=$1
  lines=$2

  if [ -n "$lines" ]; then
    needs="$needs$lines"
    echo "$lines" | while read -r line; do
      echo "$prefix $line"
    done
  fi
}

print-all "$(red "remove")" "$need_remove"
print-all "$(green "install")" "$need_sync"
print-all "$(yellow "mark-dependency")" "$need_asdeps"
print-all "$(yellow "mark-explicit")" "$need_asexplicit"
print-all "$(aur-color "aur-install")" "$need_aur"

function prompt {
  read -r -p "$1"

  case "$REPLY" in
    N|n) exit 1 ;;
    d|dry) dry=1 ;;
    Y|y|"") dry= ;;
    *) echo "c'mon, it was a simple question" >&2; exit 1 ;;
  esac
}

function pacman {
  if [ "$dry" == 1 ]; then
    echo pacman "$@"
  else
    command pacman "$@"
  fi
}

if [ -z "$needs" ]; then
  echo "Up to date"
else
  function aur-install {
    if ! can-aur-install; then
      echo "You must manually install AUR packages:" "$@"
    elif [ "$dry" == 1 ]; then
      echo "$aur_install_command" "$@"
    else
      command $aur_install_command "$@"
    fi
  }

  echo
  prompt "Proceed? [Y/n/dry]: "

  unroll "$need_remove" pacman -R --unneeded
  unroll "$need_sync" pacman -S
  unroll "$need_asdeps" pacman -D --asdeps
  unroll "$need_asexplicit" pacman -D --asexplicit

  echo
  unroll "$need_aur" aur-install
fi

if [ -n "$unused" ]; then
  echo
  print-all "$(red "prune")" "$unused"

  echo
  prompt "Remove unused packages and their unused dependencies? [Y/n/dry]: "

  unroll "$unused" pacman -R --recursive
fi
